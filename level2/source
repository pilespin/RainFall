
(gdb) disass main
Dump of assembler code for function main:
   0x0804853f <+0>:		push   ebp
   0x08048540 <+1>:		mov    ebp,esp
   0x08048542 <+3>:		and    esp,0xfffffff0
   0x08048545 <+6>:		call   0x80484d4 <p>
   0x0804854a <+11>:	leave
   0x0804854b <+12>:	ret
End of assembler dump.

(gdb) disass p
Dump of assembler code for function p:
   0x080484d4 <+0>:		push   ebp
   0x080484d5 <+1>:		mov    ebp,esp
   0x080484d7 <+3>:		sub    esp,0x68
   0x080484da <+6>:		mov    eax,ds:0x8049860
   0x080484df <+11>:	mov    DWORD PTR [esp],eax
   0x080484e2 <+14>:	call   0x80483b0 <fflush@plt>
   0x080484e7 <+19>:	lea    eax,[ebp-0x4c]
   0x080484ea <+22>:	mov    DWORD PTR [esp],eax
   0x080484ed <+25>:	call   0x80483c0 <gets@plt>
   0x080484f2 <+30>:	mov    eax,DWORD PTR [ebp+0x4]
   0x080484f5 <+33>:	mov    DWORD PTR [ebp-0xc],eax
   0x080484f8 <+36>:	mov    eax,DWORD PTR [ebp-0xc]
   0x080484fb <+39>:	and    eax,0xb0000000
   0x08048500 <+44>:	cmp    eax,0xb0000000
   0x08048505 <+49>:	jne    0x8048527 <p+83>
   0x08048507 <+51>:	mov    eax,0x8048620
   0x0804850c <+56>:	mov    edx,DWORD PTR [ebp-0xc]
   0x0804850f <+59>:	mov    DWORD PTR [esp+0x4],edx
   0x08048513 <+63>:	mov    DWORD PTR [esp],eax
   0x08048516 <+66>:	call   0x80483a0 <printf@plt>
   0x0804851b <+71>:	mov    DWORD PTR [esp],0x1
   0x08048522 <+78>:	call   0x80483d0 <_exit@plt>
   0x08048527 <+83>:	lea    eax,[ebp-0x4c]
   0x0804852a <+86>:	mov    DWORD PTR [esp],eax
   0x0804852d <+89>:	call   0x80483f0 <puts@plt>
   0x08048532 <+94>:	lea    eax,[ebp-0x4c]
   0x08048535 <+97>:	mov    DWORD PTR [esp],eax
   0x08048538 <+100>:	call   0x80483e0 <strdup@plt>
   0x0804853d <+105>:	leave
   0x0804853e <+106>:	ret
End of assembler dump.

#######################################################################
#######################################################################
#######################################################################

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

// ------------------------ Structures ------------------------

struct _IO_FILE {
    int e0;
};

// ------------------- Function Prototypes --------------------

int p(void);

// --------------------- Global Variables ---------------------

struct _IO_FILE * g1 = NULL; // 0x8049860

// ------------------------ Functions -------------------------

// Address range: 0x80484d4 - 0x804853e
int p(void) {
    fflush(g1);
    int str;
    gets((char *)&str);
    int v1;
    if ((v1 & -0x50000000) == -0x50000000) {
        // 0x8048507
        printf("(%p)\n", (int *)v1);
        _exit(1);
        // branch -> 0x8048527
    }
    // 0x8048527
    puts((char *)&str);
    return (int)strdup((char *)&str);
}

// Address range: 0x804853f - 0x804854f
int main(int argc, char ** argv) {
    // 0x804853f
    return p();
}