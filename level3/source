
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

// ------------------------ Structures ------------------------

struct _IO_FILE {
	int e0;
};

// ------------------- Function Prototypes --------------------

int v(void);

// --------------------- Global Variables ---------------------

struct _IO_FILE * g1 = NULL; // 0x8049860
struct _IO_FILE * g2 = NULL; // 0x8049880
int g3 = 0; // 0x804988c

// ------------------------ Functions -------------------------

// Address range: 0x80484a4 - 0x8048519
int v(void) {
	int str;
	fgets((char *)&str, 512, g1);
	printf((char *)&str);
    int system_rc = g3; // 0x8048519_2
    if (g3 == 64) {
        // 0x80484e4
    	fwrite("Wait what?!\n", 1, 12, g2);
    	system_rc = system("/bin/sh");
        // branch -> 0x8048518
    }
    // 0x8048518
    return system_rc;
}

// Address range: 0x804851a - 0x804852f
int main(int argc, char ** argv) {
    // 0x804851a
	return v();
}

Dump of assembler code for function v:
   0x080484a4 <+0>:		push   %ebp
   0x080484a5 <+1>:		mov    %esp,%ebp
   0x080484a7 <+3>:		sub    $0x218,%esp
   0x080484ad <+9>:		mov    0x8049860,%eax
   0x080484b2 <+14>:	mov    %eax,0x8(%esp)
   0x080484b6 <+18>:	movl   $0x200,0x4(%esp)
   0x080484be <+26>:	lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:	mov    %eax,(%esp)
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:	mov    %eax,(%esp)
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    0x804988c,%eax      // here
   0x080484df <+59>:	cmp    $0x40,%eax          // here
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    0x8049880,%eax
   0x080484e9 <+69>:	mov    %eax,%edx
   0x080484eb <+71>:	mov    $0x8048600,%eax
   0x080484f0 <+76>:	mov    %edx,0xc(%esp)
   0x080484f4 <+80>:	movl   $0xc,0x8(%esp)
   0x080484fc <+88>:	movl   $0x1,0x4(%esp)
   0x08048504 <+96>:	mov    %eax,(%esp)
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	movl   $0x804860d,(%esp)
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.
